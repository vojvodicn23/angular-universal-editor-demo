import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { SafeHtml } from '@angular/platform-browser';
import { UniversalEditorConfig, MentionUser } from '../public-api';
import { EditorApi } from './ngx-universal-editor-api';
import { Color } from './components/text-color/text-color.component';
import * as i0 from "@angular/core";
export declare class NgxUniversalEditorComponent implements OnInit, OnDestroy, AfterViewInit {
    IS_PREMIUM: boolean;
    config: UniversalEditorConfig;
    mentionUsers: MentionUser[];
    onChangeText: EventEmitter<string>;
    onEditorReady: EventEmitter<EditorApi>;
    onChangeIds: EventEmitter<string[]>;
    editor: ElementRef;
    editorWidth: number;
    readonly textColors: {
        colorName: string;
        colorCode: string;
        selected: boolean;
    }[];
    defaultTextColor: Color | undefined;
    innerHtml: SafeHtml;
    private el;
    private sanitizer;
    private apiService;
    private subscriptions;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onKeydown(event: KeyboardEvent): void;
    onInput(event: any): void;
    isBulletList: boolean;
    private currentBulletListElement;
    onBulletListClick(): void;
    isNumberedList: boolean;
    onNumberedListClick(): void;
    private textStyles;
    textStyle: string;
    private currentTextStyleElement;
    get textStyleDisabled(): boolean;
    onStyleChange(event: string): void;
    private textElement;
    private selectedText;
    resizeTimeout: any;
    private emitChange;
    private mergeAdjacent;
    getSelectedText(): string;
    private splitAtCaret;
    private splitElementAtText;
    private replaceElement;
    private deleteCharBeforeCaret;
    private createElementFromString;
    private addElement;
    private setCursorPositionAfter;
    onHostClick(event: MouseEvent): void;
    onResize(): void;
    private traverseTheDOM;
    selectedColor: Color | undefined;
    private currentTextColorElement;
    private textColorRef;
    onTextColorChange(color: Color): void;
    isBold: boolean;
    private currentBoldElement;
    onSelectBold(): void;
    isItalic: boolean;
    private currentItalicElement;
    onSelectItalic(): void;
    isUnderline: boolean;
    private currentUnderlineElement;
    onSelectUnderline(): void;
    isStrikethrough: boolean;
    private currentStrikethroughElement;
    onSelectStrikethrough(): void;
    isSubscript: boolean;
    private currentSubscriptElement;
    onSelectSubscript(): void;
    isSuperscript: boolean;
    private currentSupesrsciptElement;
    onSelectSuperscript(): void;
    private highestFormatElement;
    onClearFormatting(): void;
    private isMentionDropdownOpen;
    filteredUsers: any[];
    private searchUserText;
    private enteredUser;
    onMentionClick(): void;
    onMouseEnter(enteredUser: any): void;
    onSelectUser(user: any): void;
    private onCancelSelectUser;
    private getCaretCoordinates;
    private openMentionDropdown;
    private closeMentionDropdown;
    private filterUsers;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxUniversalEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxUniversalEditorComponent, "ngx-universal-editor", never, { "config": { "alias": "config"; "required": false; }; "mentionUsers": { "alias": "mentionUsers"; "required": false; }; }, { "onChangeText": "onChangeText"; "onEditorReady": "onEditorReady"; "onChangeIds": "onChangeIds"; }, never, never, false, never>;
}
